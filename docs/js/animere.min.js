/*!
 * Animere.js v1.3.0
 * Copyright (c) 2020 Johann Schopplich
 * MIT license
 */
export default class{constructor({prefix:e="animere",offset:t=.2,watchDOM:r=!1}={}){this.prefix=e,this.offset=t,this.supportsScroll()&&(this.prefersReducedMotion()||(Array.from(document.querySelectorAll(`[data-${this.prefix}]`)).forEach(e=>{this.intersectOnScroll(e)}),r&&window.addEventListener("DOMContentLoaded",()=>{this.onDOMContentChanges()})))}animateCSS(e,t,r="animate__"){return new Promise((i,n)=>{const s=`${r}${t}`;e.classList.add(r+"animated",s),e.addEventListener("animationend",(function t(){e.classList.remove(r+"animated",s),e.removeEventListener("animationend",t),i()}))})}intersectionObserverCallback(e,t){e.forEach(e=>{if(!e.isIntersecting)return;const r=e.target;Object.keys(r.dataset).filter(e=>e!==this.prefix&&e.startsWith(this.prefix)).forEach(e=>{const t=e.slice(this.prefix.length).toLowerCase(),i="--animate-"+t;"delay"===t&&(r.style.animationDelay=`var(${i})`),"repeat"===t&&(r.style.animationIterationCount=`var(${i})`),r.style.setProperty(i,r.dataset[e])}),r.style.visibility=null,this.animateCSS(r,r.dataset[this.prefix]),t.unobserve(r)})}intersectOnScroll(e){e.style.visibility="hidden";new IntersectionObserver(this.intersectionObserverCallback.bind(this),{root:null,rootMargin:"0px",threshold:this.offset}).observe(e)}onDOMContentChanges(){new MutationObserver(e=>{e.forEach(e=>{const t=e.addedNodes;t&&Array.from(t).filter(e=>1===e.nodeType&&this.prefix in e.dataset).forEach(e=>{this.intersectOnScroll(e)})})}).observe(document.body,{childList:!0,subtree:!0})}prefersReducedMotion(){return window.matchMedia("(prefers-reduced-motion: reduce)").matches}supportsScroll(){return"onscroll"in window&&!/(gle|ing)bot/.test(navigator.userAgent)}}
