/*!
 * Animere.js v1.3.1
 * Copyright (c) 2020 Johann Schopplich
 * MIT license
 */
export default class{constructor({prefix:e="animere",offset:t=.2,watchDOM:i=!1}={}){if(this.prefix=e,this.offset=t,this.supportsScroll()&&!this.prefersReducedMotion()){for(const e of document.querySelectorAll(`[data-${this.prefix}]`))this.intersectOnScroll(e);i&&window.addEventListener("DOMContentLoaded",()=>{this.onDOMContentChanges()})}}animateCSS(e,t,i="animate__"){return new Promise((n,s)=>{const r=`${i}${t}`;e.classList.add(i+"animated",r),e.addEventListener("animationend",(function t(){e.classList.remove(i+"animated",r),e.removeEventListener("animationend",t),n()}))})}intersectionObserverCallback(e,t){for(const i of e){if(!i.isIntersecting)continue;const e=i.target;Object.keys(e.dataset).filter(e=>e!==this.prefix&&e.startsWith(this.prefix)).forEach(t=>{const i=t.slice(this.prefix.length).toLowerCase(),n="--animate-"+i;"delay"===i&&(e.style.animationDelay=`var(${n})`),"repeat"===i&&(e.style.animationIterationCount=`var(${n})`),e.style.setProperty(n,e.dataset[t])}),e.style.visibility=null,this.animateCSS(e,e.dataset[this.prefix]),t.unobserve(e)}}intersectOnScroll(e){e.style.visibility="hidden";new IntersectionObserver(this.intersectionObserverCallback.bind(this),{root:null,rootMargin:"0px",threshold:this.offset}).observe(e)}onDOMContentChanges(){new MutationObserver(e=>{for(const t of e){const e=t.addedNodes;e&&Array.from(e).filter(e=>1===e.nodeType&&this.prefix in e.dataset).forEach(e=>{this.intersectOnScroll(e)})}}).observe(document.body,{childList:!0,subtree:!0})}prefersReducedMotion(){return window.matchMedia("(prefers-reduced-motion: reduce)").matches}supportsScroll(){return"onscroll"in window&&!/(gle|ing)bot/.test(navigator.userAgent)}}
